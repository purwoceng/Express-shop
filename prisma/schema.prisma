// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Cart {
  id         Int      @id @default(autoincrement())
  product_id Int
  quantity   Int      @default(1)
  total      Float    @default(0) @db.Float
  user_id    Int
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @updatedAt
  product    Product  @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "cart_ibfk_1")

  user User @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "cart_ibfk_2")

  @@index([user_id], map: "user_id")
  @@index([product_id], map: "product_id")
  @@map("cart")
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  order_id   Int
  product_id Int
  quantity   Int      @default(1)
  price      Float    @default(0) @db.Float
  total      Float    @default(0) @db.Float
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @updatedAt
  order      Order    @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_items_ibfk_1")
  product    Product  @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_items_ibfk_2")

  @@index([order_id], map: "order_id")
  @@index([product_id], map: "product_id")
  @@map("order_items")
}

model Order {
  id          Int         @id @default(autoincrement())
  date        DateTime    @default(now()) @db.DateTime(0)
  number      String      @db.VarChar(255)
  total       Float       @default(0) @db.Float
  user_id     Int
  status      String      @default("unpaid")
  created_at  DateTime    @default(now()) @db.Timestamp(0)
  updated_at  DateTime    @default(now()) @db.Timestamp(0)
  order_items OrderItem[]

  user    User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_ibfk_1")
  Payment Payment[]

  @@map("orders")
}

model Category {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  products   Product[]

  @@map("categories")
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(255)
  category_id Int
  price       Float       @default(0) @db.Float
  in_stock    Boolean     @default(dbgenerated("(true)"))
  description String?     @db.Text
  created_at  DateTime    @default(now()) @db.Timestamp(0)
  updated_at  DateTime    @updatedAt
  cart        Cart[]
  order_items OrderItem[]

  category Category @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "product_ibfk_1")

  @@map("products")
}

model Payment {
  id          Int      @id @default(autoincrement())
  order_id    Int
  amount      Float    @default(0) @db.Float
  cardNumber  String
  cvv         Int
  expiryMouth String
  expiryYear  String
  created_at  DateTime @default(now()) @db.Timestamp(0)
  updated_at  DateTime @updatedAt
  order       Order    @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "payment_ibfk_1")

  @@map("payments")
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  name       String
  password   String
  is_blocked Boolean  @default(false)
  role_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  tokens Token[]
  role   Role    @relation(fields: [role_id], references: [id])
  Cart   Cart[]
  Order  Order[]

  @@map("users")
}

model Token {
  id         Int      @id @default(autoincrement())
  user_id    Int
  token      String   @unique
  expires_at DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])

  @@map("tokens")
}

model Role {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  users       User[]
  permissions PermissionRole[]

  @@map("roles")
}

model Permission {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  roles PermissionRole[]

  @@map("permissions")
}

model PermissionRole {
  permission_id Int
  role_id       Int

  permission Permission @relation(fields: [permission_id], references: [id])
  role       Role       @relation(fields: [role_id], references: [id])

  @@id([permission_id, role_id])
  @@map("permission_role")
}
